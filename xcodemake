#!/usr/bin/env perl -w
#
# "xcodemake"
#
# A short script to convert xcodebuild output into a Makefile.
# Once a Makefile has been generated you can use the much
# faster "make" command for most builds instead of launching
# the more ponderous xcodebuild for each iteration. Sure,
# this could be rewritten in python and use ninja instead.
#
# xcodebuild re-run if its arguments change or make fails or project modified.
# Makefile re-generated if script modified or xcodebuild recaptured.
#

use IO::File;
use strict;

my $log = "xcodemake @ARGV.log";
my $make = "Makefile";

my $xcodebuild = ($ENV{DEVELOPER_BIN_DIR}||'/usr/bin')."/xcodebuild";
my $archs = $ENV{ARCHS}||'arm64';
my $args = join ' ', map { "'$_'" } @ARGV;
$args .= " -config Debug" if $args !~ /-config/;

my $variant = "$xcodebuild ARCHS=$archs @ARGV";
my $builddb = ($ENV{OBJROOT}||'/tmp')."/XCBuildData/build.db";
my $xcbuild = "/usr/bin/env -i '$xcodebuild' ARCHS=$archs $args";
my $EXIT_SUCCESS = 0;

# Recapture xcodebuild output if paramaters change or project has been edited
captureXcodebuild() if ! -f $log || `find . -name project.pbxproj -newer '$log'`;

# Regenerate Makefile (if script newer or different xcodebuild or arguments)
generateMakefile() if ! -f $make || -M $0 < -M $make || !`grep ' $variant' Makefile`;

exit $EXIT_SUCCESS if $EXIT_SUCCESS == system "make";

rename $builddb, $builddb.".save";

# If xcodebuild compiles, re-capture.
if ($EXIT_SUCCESS == system $xcbuild) {
    captureXcodebuild();
    generateMakefile();
    exit $EXIT_SUCCESS if $EXIT_SUCCESS == system "make";
}

rename $builddb.".save", $builddb;
exit !$EXIT_SUCCESS;

sub captureXcodebuild {
    # Move Xcode's build database to one side to
    # be able to use xcodebuild inside a scheme.
    rename $builddb, $builddb.".save";

    my $build = "$xcbuild clean; /usr/bin/env -i $xcbuild 2>&1 | tee '$log'";
    warn "Executing: $build\n";
    if ($EXIT_SUCCESS != system $build) {
        unlink $log;
        exit !$EXIT_SUCCESS;
    }
    unlink $make;
    
    rename $builddb.".save", $builddb;
}

my ($LOG, $fileArg);
sub generateMakefile {
    $LOG = IO::File->new("< $log") or die "Could not open $log: $!";

    # regex for file path argument
    my $notSpace = "[^\\\\\\s]";
    $fileArg = "$notSpace+(?:\\\\.$notSpace*)*";

    sub escape {
        $_[1] =~ s/([$_[0]])/\\$1/g;
    }
    sub unescape {
        $_[1] =~ s/\\([$_[0]])/$1/g;
    }

    # escape $ for make
    sub dollarEscape {
        $_[0] =~ s/\\\$/\\\$\$/g;
    }
    # escape file path
    sub shellEscape {
        escape "()", $_[0];
        dollarEscape $_[0];
    }

    sub nextLine {
        my $line = $LOG->getline() or return;
        chomp $line;
        return $line;
    }

    sub nextCD {
        my ($cd) = nextLine() =~ /cd (.*)/;
        unescape "^\$'()&", $cd;
        escape " ", $cd;
        dollarEscape $cd;
        return "\t\tcd $cd\n\t\t/usr/bin/time ";
    }

    # Extract values for the option from a command
    sub extractOption {
        my ($line, $option) = @_;
        return my @a = $line =~ / $option ($fileArg)/g;
    }

    my $MAKE = IO::File->new("> $make") or die "Could not open $make: $!";
    print $MAKE <<HEADER;
#
# Generated @{[scalar localtime()]} from
# $variant
#

default: main

HEADER

    my (%rules, @linked, @codesigns);
    while (defined(my $line = nextLine())) {
        print $MAKE "# $line\n";
        # Add rules for "C" family sources.
        if (my ($object, $source) = $line =~
            /^CompileC ($fileArg) ($fileArg) /) {
            my $cd = nextCD();
            do {
                $line = nextLine();
            } while ($line =~ /^\s*$|response file/);
            unescape "{}()", $object;
            escape "\$&", $object;
            dollarEscape $source;
            unescape "'", $source;
            print $MAKE "\n$object: $source\n";
            shellEscape $object;
            dollarEscape $line;
            print $MAKE "$cd$line && touch $object\n\n";
        # Add rules for Swift sources (expand batches)
        } elsif ($line =~ /^SwiftCompile \w+ \w+/) {
            my $cd = nextCD();
            ($line = nextLine()) =~
                s/builtin-swiftTaskExecution -- |-frontend-parseable-output//g;
            my @sources = extractOption($line, "-primary-file")
                or warn "Release/Whole module optimization not permitted: $line";
            my @objects = extractOption($line, "-o");
            # print "# $line\n@sources -- @objects\n\n";
            dollarEscape $line;
            foreach my $i (0..$#sources) {
                unescape "{}()", my $object = $objects[$i];
                unescape "\$'&{}()*", $sources[$i];
                $sources[$i] =~ s/\$/\$\$/g;
                next if $rules{$object}++;
                print $MAKE "\n$object: $sources[$i]\n";
                shellEscape $object;
                print $MAKE "$cd$line && touch $object\n\n";
            }
        # Add rule to link executables
        } elsif (my ($executable) = $line =~ /^Ld ($fileArg) /) {
            my $cd = nextCD();
            $line = nextLine();
            my ($linkfile) = extractOption($line, "-filelist") or next;
            $linkfile =~ s/\\(.)/$1/g;
            print("Link file for $executable: $linkfile\n");
            my $OBJS = IO::File->new("< $linkfile") || IO::File->new("< /dev/null");
            escape "&\$", $executable;
            print $MAKE "\n$executable:";
            while (my $object = $OBJS->getline()) {
                chomp $object;
                escape " '&\$", $object;
                next if $object eq $executable || !$rules{$object};
                print $MAKE " $object";
            }
            dollarEscape $line;
            print $MAKE "\n$cd$line\n\n";
            push @linked, $executable if $executable !~ /\.o$/;
        } elsif ($line =~ m@^    /usr/bin/(codesign|touch)@) {
            dollarEscape $line;
            push @codesigns, $line;
        }
    }

    print $MAKE "main: @linked\n";
    print $MAKE join "\n", map {"\t$_"} @codesigns;
    print $MAKE "\n";
    close $MAKE;
}
